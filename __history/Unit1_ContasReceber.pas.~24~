unit Unit1_ContasReceber;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.StdCtrls,
  Unit_Persistencia, Vcl.Mask, Vcl.Menus;

type
  Tfrm_contasReceber = class(TForm)
    Label1: TLabel;
    StringGrid: TStringGrid;
    Label2: TLabel;
    edt_Pesquisa: TMaskEdit;
    PopupMenu1: TPopupMenu;
    Editarcadastro1: TMenuItem;
    procedure FormShow(Sender: TObject);
    procedure carregaContasReceber;
    //procedure Combox_ClientesChange(Sender: TObject);
    procedure edt_PesquisaChange(Sender: TObject);
    procedure populaGrid;
    procedure StringGridSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure Editarcadastro1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frm_contasReceber: Tfrm_contasReceber;
  Linha: Integer;

implementation

{$R *.dfm}



procedure Tfrm_contasReceber.Editarcadastro1Click(Sender: TObject);
var selecionado: String;
begin
     selecionado:=  StringGrid.Cells[0, Linha];
     ShowMessage(selecionado);
     Application.MessageBox('Deseja pagar essa conta ?',
      'Deseja realmente dar baixa nessa conta? ', MB_YESNO + MB_OK);
end;

procedure Tfrm_contasReceber.edt_PesquisaChange(Sender: TObject);
begin
      populaGrid;
end;


procedure Tfrm_contasReceber.populaGrid;
var Clientes_Atuais: Clientes_Cadastrados;
    i, j: Integer;
    Campo, Termo: String;
    contas: Contas_Receber;
      Cli: Dados_Cliente;
begin
  If Trim(edt_Pesquisa.Text) = '' Then
    Begin
      Campo := '';
      Termo := '';
    End;
  Campo := 'Nome';
  Termo := Trim(edt_Pesquisa.Text);
  SetLength(Clientes_Atuais, 0);
  Clientes_Atuais := Retorna_Clientes_Cadastrados(Campo, Termo, 'AZ');
  StringGrid.RowCount := 1; //Recebe primeiro só a linha de cabeçalho
  SetLength(contas, 0);
  contas := Retorna_Contas_Receber();

  for I := 0 to Length(contas) - 1 do
  begin
      for j := 0 to Length(Clientes_Atuais)-1 do
        begin
          if Clientes_Atuais[j].Codigo=contas[i].CliCod then
          begin
              StringGrid.RowCount := 1 + StringGrid.RowCount;
              StringGrid.Cells[0, I + 1] := IntToStr(contas[I].Cod);
    Cli := Retorna_Dados_Cliente(contas[I].CliCod);
    StringGrid.Cells[1, I + 1] := Cli.nome;
    StringGrid.Cells[2, I + 1] := FloatToStr(contas[I].Valor);
    StringGrid.Cells[3, I + 1] := contas[I].Data_Vencimento;
          end;
        end;


  end;



end;

procedure Tfrm_contasReceber.StringGridSelectCell(Sender: TObject; ACol,
  ARow: Integer; var CanSelect: Boolean);
begin
  Linha := ARow;
end;

procedure Tfrm_contasReceber.FormShow(Sender: TObject);
begin

  StringGrid.Cells[0, 0] := 'Cod';
  StringGrid.Cells[1, 0] := 'Cliente';
  StringGrid.Cells[2, 0] := 'Valor R$';
  StringGrid.Cells[3, 0] := 'Data Vencimento';
  StringGrid.ColWidths[1] := 100;
  StringGrid.ColWidths[1] := 350;
  StringGrid.ColWidths[2] := 100;
  StringGrid.ColWidths[3] := 100;

  carregaContasReceber;
end;

procedure Tfrm_contasReceber.carregaContasReceber;
var
  contas: Contas_Receber;
  I: Integer;
  Cli: Dados_Cliente;
begin
  SetLength(contas, 0);
  contas := Retorna_Contas_Receber();
  If Length(contas) >= 1 Then
    StringGrid.RowCount := Length(contas) + 1
  Else
  Begin
    StringGrid.RowCount := 2;
    StringGrid.FixedRows := 1;
    StringGrid.Cells[0, 1] := '';
    StringGrid.Cells[1, 1] := '';
    StringGrid.Cells[2, 1] := '';
    StringGrid.Cells[3, 1] := '';
  End;
  for I := 0 to Length(contas) - 1 do
  Begin
    StringGrid.Cells[0, I + 1] := IntToStr(contas[I].Cod);
    Cli := Retorna_Dados_Cliente(contas[I].CliCod);
    StringGrid.Cells[1, I + 1] := Cli.nome;
    StringGrid.Cells[2, I + 1] := FloatToStr(contas[I].Valor);
    StringGrid.Cells[3, I + 1] := contas[I].Data_Vencimento;
  end;

end;

end.
