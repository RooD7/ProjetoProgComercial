unit Unit1_ContasReceber;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Grids, Vcl.StdCtrls,
  Unit_Persistencia;

type
  Tfrm_contasReceber = class(TForm)
    Label1: TLabel;
    StringGrid: TStringGrid;
    Combox_Clientes: TComboBox;
    Label2: TLabel;
    procedure FormShow(Sender: TObject);
    procedure carregaContasReceber;
    procedure Combox_ClientesChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frm_contasReceber: Tfrm_contasReceber;

implementation

{$R *.dfm}

procedure Tfrm_contasReceber.Combox_ClientesChange(Sender: TObject);
var
  Campo, Termo: String;
  I: Integer;
  Clientes_Atuais: Clientes_Cadastrados;
  contas: Contas_Receber;
  contasCli: Contas_Receber;
  nome: String;
  Cli: Dados_Cliente;
begin
  Campo := '';
  Termo := '';
  SetLength(Clientes_Atuais, 0);
  Clientes_Atuais := Retorna_Clientes_Cadastrados(Campo, Termo, 'AZ');
  for I := 0 to Length(Clientes_Atuais) - 1 do
  Begin
    Combox_Clientes.Items.Add(Clientes_Atuais[I].nome);
  End;

  nome := Combox_Clientes.Text;
  //ShowMessage(nome);

  SetLength(contas, 0);
  contas := Retorna_Contas_Receber();
  StringGrid.RowCount := 1;
  for I := 0 to Length(contas) - 1 do
  begin
    Cli := Retorna_Dados_Cliente(contas[I].CliCod);

    //ShowMessage(IntToStr(pos(cli.Nome,nome)));
    if (pos(cli.Nome,nome)>0) then
    begin
    //ShowMessage('achou');
      StringGrid.RowCount := StringGrid.RowCount + 1;
      StringGrid.Cells[0, I + 1] := IntToStr(contas[I].Cod);
      Cli := Retorna_Dados_Cliente(contas[I].CliCod);
      StringGrid.Cells[1, I + 1] := Cli.nome;
      StringGrid.Cells[2, I + 1] := FloatToStr(contas[I].Valor);
      StringGrid.Cells[3, I + 1] := contas[I].Data_Vencimento;
    end;

  end;

end;

procedure Tfrm_contasReceber.FormShow(Sender: TObject);
begin

  StringGrid.Cells[0, 0] := 'Cod';
  StringGrid.Cells[1, 0] := 'Cliente';
  StringGrid.Cells[2, 0] := 'Valor';
  StringGrid.Cells[3, 0] := 'Data Vencimento';
  StringGrid.ColWidths[1] := 100;
  StringGrid.ColWidths[1] := 350;
  StringGrid.ColWidths[2] := 100;
  StringGrid.ColWidths[3] := 100;

  carregaContasReceber;
end;

procedure Tfrm_contasReceber.carregaContasReceber;
var
  contas: Contas_Receber;
  I: Integer;
  Cli: Dados_Cliente;
begin
  SetLength(contas, 0);
  contas := Retorna_Contas_Receber();
  If Length(contas) >= 1 Then
    StringGrid.RowCount := Length(contas) + 1
  Else
  Begin
    StringGrid.RowCount := 2;
    StringGrid.FixedRows := 1;
    StringGrid.Cells[0, 1] := '';
    StringGrid.Cells[1, 1] := '';
    StringGrid.Cells[2, 1] := '';
    StringGrid.Cells[3, 1] := '';
  End;
  for I := 0 to Length(contas) - 1 do
  Begin
    StringGrid.Cells[0, I + 1] := IntToStr(contas[I].Cod);
    Cli := Retorna_Dados_Cliente(contas[I].CliCod);
    StringGrid.Cells[1, I + 1] := Cli.nome;
    StringGrid.Cells[2, I + 1] := FloatToStr(contas[I].Valor);
    StringGrid.Cells[3, I + 1] := contas[I].Data_Vencimento;
  end;

end;

end.
